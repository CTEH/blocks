= Blocks

How do you render your blocks of code?

With blocks, you can:
1. Easily define named blocks of view-level code, capable of taking parameters as arguments
2. Render a defined block of view-level code and pass in an arbitrary number of parameters
3. Provide a default block of code to render if a named block is not found
4. Specify view-level code to render before, after, or around a particular block of code
5. Render a collection of elements using a defined block

== Simple Case
  <% blocks.define :sample do |a, b| %>
    This is a snippet of code with parameters <%= a %> and <%= b %> passed in<br>
  <% end %>

  <% blocks.before :sample do %>
    This is a snippet of code that will render before the block named :sample<br>
  <% end %>
  
  <% blocks.after :sample do %>
    This is a snippet of code that will render after the block named :sample<br>
  <% end %>
  
  <%# This is when the code gets rendered %>
  <%= blocks.render :sample, "1", 2 %>
  
  <%# Provide a wrapper element to wrap around the rendered block
  <%= blocks.render :sample, "1", 2, :wrap_with => {:tag => :div, :id => "sample" } %>
  
  <%# Rendering a block that doesn't exist will simply render nothing %>
  <%= blocks.render :sample2 %>
  
  <%# Rendering a block that doesn't exist with a default definition will simply use the default definition %>
  <%= blocks.render :sample3 do %>
    This is a snippet that will get rendered if a block named :sample3 is not defined anywhere
  <% end %>
  
== A More Complicated Case
In this example, @brands will represent a collection of brands fetched from the database
  <% blocks.define :brand do |brand| %>
    Brand <%= brand.name %>
  <% end %>

  <%= blocks.render :brand,
                    :collection => @brands,
                    :wrap_with => { :tag => :ul, :id => "brands", :style => "list-style-type:circle" },
                    :wrap_each => { :tag => :li,
                                    :id => Proc.new {|brand| "brand#{brand.id}"}, 
                                    :class => Proc.new { cycle("even", "odd") },
                                    :style => "padding-left: 20px;" }%>
